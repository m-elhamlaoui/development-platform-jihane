services:
  # Database
  database:
    image: postgres:15-alpine
    container_name: development-platform-db
    environment:
      POSTGRES_DB: development_platform
      POSTGRES_USER: dev_user
      POSTGRES_PASSWORD: dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - development-platform-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev_user -d development_platform"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: development-platform-backend
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/development_platform
      SPRING_DATASOURCE_USERNAME: dev_user
      SPRING_DATASOURCE_PASSWORD: dev_password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      JWT_SECRET: your-jwt-secret-key-here
      CLOUDINARY_CLOUD_NAME: your-cloudinary-cloud-name
      CLOUDINARY_API_KEY: your-cloudinary-api-key
      CLOUDINARY_API_SECRET: your-cloudinary-api-secret
    ports:
      - "8090:8090"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - development-platform-network
    volumes:
      - ./backend/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: development-platform-frontend
    environment:
      VITE_API_URL: http://localhost:8090/api
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - development-platform-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (for caching/sessions)
  redis:
    image: redis:7-alpine
    container_name: development-platform-redis
    ports:
      - "6379:6379"
    networks:
      - development-platform-network
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

volumes:
  postgres_data:
  redis_data:

networks:
  development-platform-network:
    driver: bridge 